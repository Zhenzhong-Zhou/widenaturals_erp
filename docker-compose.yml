services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '8082:8082'
    volumes:
      - ./server:/app
      - ./env:/env:ro
    env_file:
      - ./env/.env.defaults
      - ./env/${NODE_ENV:-development}/.env.database
      - ./env/${NODE_ENV:-development}/.env.server
    environment:
      PORT: 8082
      NODE_ENV: ${NODE_ENV:-development}
      DB_HOST: database
      DB_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - server_jwt_access_secret
      - server_jwt_refresh_secret
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    mem_limit: 512m
    restart: on-failure
    networks:
      - app_network

  database:
    image: postgres:17-alpine
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d widenaturals_erp_development']
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_DB: widenaturals_erp_development
    volumes:
      - pgdata:/var/lib/postgresql/data
    secrets:
      - db_password
    mem_limit: 1g
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: '1g'
        reservations:
          memory: '512m'
    networks:
      - app_network
    restart: on-failure

  redis:
    image: redis:7.0-alpine
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - app_network

  client:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5175:5175"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_BASE_URL=http://localhost:8082/api/v1
      - VITE_PORT=5175
    volumes:
      - ./client:/app
      - ./env:/env:ro
    command: ["npm", "run", "start"]
    depends_on:
      - server
    networks:
      - app_network

  nginx:
    image: nginx:stable-alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl:ro
    depends_on:
      - client
      - server
    networks:
      - app_network
      - public_network
    restart: on-failure

volumes:
  pgdata:
  redis_data:

secrets:
  server_jwt_access_secret:
    file: ./secrets/${NODE_ENV:-development}/server_jwt_access_secret.txt
  server_jwt_refresh_secret:
    file: ./secrets/${NODE_ENV:-development}/server_jwt_refresh_secret.txt
  db_password:
    file: ./secrets/${NODE_ENV:-development}/db_password.txt

networks:
  app_network:
    driver: bridge
#    internal: true
  public_network:
    driver: bridge  # Public network for Nginx
