services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '8082:8082'
    volumes:
      - ./server:/app
      - ./env:/env:ro
    env_file:
      - ./env/.env.defaults # Load non-sensitive environment variables
      - ./env/${NODE_ENV:-development}/.env.database # Load non-sensitive environment variables
      - ./env/${NODE_ENV:-development}/.env.server # Load non-sensitive environment variables
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DB_HOST: database
      DB_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - server_jwt_access_secret
      - server_jwt_refresh_secret
    depends_on:
      database:
        condition: service_healthy
    mem_limit: 512m
    restart: on-failure
    networks:
      - app_network
  #    command: ["node", "--trace-warnings", "./src/index.js"]
  #    healthcheck:
  #      test: [ "CMD-SHELL", "curl -f http://localhost:8082/example/health || exit 1" ]
  #      interval: 30s
  #      timeout: 10s
  #      retries: 5
  #      start_period: 30s

  database:
    image: postgres:17-alpine
    healthcheck:
      test:
        ['CMD-SHELL', 'pg_isready -U postgres -d widenaturals_erp_development']
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password # Securely load password
      POSTGRES_DB: widenaturals_erp_development
    volumes:
      - pgdata:/var/lib/postgresql/data
    secrets:
      - db_password
    mem_limit: 1g
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: '1g'
        reservations:
          memory: '512m'
    networks:
      - app_network
    restart: on-failure


#  redis:
#    image: redis:6.2
#    container_name: redis_cache
#    ports:
#      - "6379:6379"
#    volumes:
#      - ./redis.conf:/usr/local/etc/redis/redis.conf
#    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]

#  nginx:
#    image: nginx:latest
#    ports:
#      - "443:443" # HTTPS
#      - "80:80"   # Redirect HTTP to HTTPS
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#      - ./nginx/ssl:/etc/ssl:ro
#    depends_on:
#      server:
#        condition: service_healthy
#    networks:
#      - app_network
#    restart: on-failure

#  certbot:
#    image: certbot/certbot
#    volumes:
#      - ./nginx/ssl:/etc/letsencrypt
#      - ./nginx/conf:/etc/nginx/conf.d
#    entrypoint: sh -c 'certbot certonly --webroot -w /var/www/certbot --email your-email@example.com --agree-tos --no-eff-email -d example.com'

volumes:
  pgdata:

secrets:
  server_jwt_access_secret:
    file: ./secrets/${NODE_ENV:-development}/server_jwt_access_secret.txt
  server_jwt_refresh_secret:
    file: ./secrets/${NODE_ENV:-development}/server_jwt_refresh_secret.txt
  db_password:
    file: ./secrets/${NODE_ENV:-development}/db_password.txt

networks:
  app_network:
    driver: bridge
#    internal: true // todo when has client try it again
